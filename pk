#!/usr/bin/env python
from functools import partial
from pymake import *
import argparse
import imp
import sys

def add_function(subparsers, module, f):
    func = getattr(module, f)
    if getattr(func, 'ignored', False) or not inspect.isfunction(func):
        return

    # TODO effectively handle keywords and defaults
    subparser = subparsers.add_parser(f, help=func.__doc__)
    args, varargs, keywords, defaults = inspect.getargspec(func)
    for arg in args:
        subparser.add_argument(arg)

    depends = getattr(func, "depends", None)

    func_partial = partial(pymake, taskname=f)
    setattr(module, f, func_partial)
    rules[f] = Action(f, func, depends)
 
def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest="subparser")

    pymake = imp.new_module('pymake')
    dummy = imp.new_module('dummy')

    exec "from pymake import *" in dummy.__dict__

    fname = "Pymake.py"
    if not os.path.exists(fname):
        print 'No Pymake file found. Exiting...'

    with open(fname) as f:
        code = f.read()
    exec code in pymake.__dict__
    
    functions = [f for f in sorted(dir(pymake)) if f not in dir(dummy)]

    print functions
    for f in functions:
        add_function(subparsers, pymake, f)
   
    if len(sys.argv) < 2:
        args = parser.parse_args([env.DEFAULT_ACTION])
    else:
        args = parser.parse_args()
        
    print args
    command = args.subparser
    kwargs = vars(args)
    del kwargs['subparser']

    # TODO pass args
    rules[command].run(**kwargs)

    #function(**kwargs)

if __name__ == "__main__":
    main()
